[project]
name = "investiq-platform"
version = "0.1.0"
description = "智能投资决策平台 - 基于AI增强的行业选择与组合支持系统"
authors = [
    {name = "InvestIQ Team", email = "team@investiq.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["investment", "ai", "gpu", "jetson", "finance"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    # FastAPI 核心框架
    "fastapi^0.104.1",
    "uvicorn[standard]^0.24.0",
    "pydantic^2.5.0",
    "pydantic-settings^2.1.0",
    
    # 数据库相关
    "sqlalchemy^2.0.23",
    "alembic^1.13.1",
    "asyncpg^0.30.0",
    
    # Redis 缓存
    "redis^5.0.1",
    
    # 认证和安全
    "python-jose[cryptography]^3.3.0",
    "passlib[bcrypt]^1.7.4",
    "python-multipart^0.0.6",
    
    # 数据处理
    "pandas^2.1.4",
    "numpy^1.24.4",
    "scipy^1.11.4",
    "scikit-learn^1.3.2",
    "statsmodels^0.14.0",
    "arch^6.2.0",
    
    # 金融数据处理
    "yfinance^0.2.28",
    "akshare^1.12.0",
    
    # 图像处理
    "Pillow>=10.1.0",
    "opencv-python>=4.8.1.78",
    
    # 文档和OCR
    "PyPDF2>=3.0.1",
    "python-docx>=1.1.0",
    
    # 网络请求
    "httpx^0.25.2",
    "aiohttp^3.9.1",
    "requests^2.31.0",
    "feedparser^6.0.10",
    "aiofiles^23.2.0",
    
    # 任务队列
    "celery^5.3.4",
    
    # 监控和日志
    "prometheus-client^0.19.0",
    "structlog^23.2.0",
    "loguru^0.7.2",
    
    # 配置管理
    "python-dotenv^1.0.0",
    "pyyaml^6.0.1",
    
    # 其他工具
    "click^8.1.7",
    "rich^13.7.0",
    "typer^0.9.0",
]

[project.optional-dependencies]
# GPU 加速计算 (依赖dustynv基础镜像版本)
gpu = [
    # GPU核心库 (信任容器环境版本)
    "cupy-cuda11x>=12.3.0",  # dustynv镜像会自动适配
    "torch>=2.1.0",  # dustynv镜像已预装2.7版本
    "transformers>=4.36.0",
    "accelerate>=0.25.0",
    "sentence-transformers>=2.2.2",
    # llama.cpp Python绑定
    "llama-cpp-python[server]>=0.2.20",
    # 中文分词和NLP
    "jieba>=0.42.1",
    "zhconv>=1.4.3",
    # 数据处理工具
    "tokenizers>=0.15.0",
    "psutil>=5.9.0",
    "nvidia-ml-py>=12.535.0",
]

# 开发依赖
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]

# 生产依赖
prod = [
    "gunicorn>=21.2.0",
]

[project.urls]
Homepage = "https://github.com/investiq/investiq-platform"
Documentation = "https://docs.investiq.com"
Repository = "https://github.com/investiq/investiq-platform.git"
Issues = "https://github.com/investiq/investiq-platform/issues"

[project.scripts]
investiq = "backend.app.main:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend"]

[tool.uv]
# 统一使用project.optional-dependencies.dev
# 避免重复定义开发依赖

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_optional = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "cupy.*",
    "cudf.*",
    "cuml.*",
    "cusignal.*",
    "yfinance.*",
    "akshare.*",
    "llama_cpp.*",
    "jieba.*",
    "zhconv.*",
    "chronos.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["backend/tests", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--maxfail=5",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "container: marks tests that require container environment",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/app/main.py",
    "*/app/cli.py",
    "*/app/utils/gpu.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2
